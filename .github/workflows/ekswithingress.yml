name: Build, Push to ECR and Deploy Backend to EKS

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set IMAGE_TAG
        id: set_tag
        run: echo "image_tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
          docker build -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:${{ steps.set_tag.outputs.image_tag }} .

  push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker image to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
          IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          docker tag $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.1'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Configure kubectl
        run: aws eks --region ${{ vars.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Install NGINX Ingress Controller
        run: |
          if ! kubectl get ns ingress-nginx >/dev/null 2>&1; then
            echo "Installing NGINX Ingress Controller..."
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
            echo "Waiting for Ingress controller LoadBalancer..."
            kubectl wait --namespace ingress-nginx \
              --for=condition=available --timeout=300s deployment/ingress-nginx-controller
          else
            echo "Ingress Controller already installed."
          fi

      - name: Update deployment image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          sed -i "s|image: .*|image: $ACCOUNT_ID.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG|" manifests/deployment.yml

      - name: Deploy Deployment & Service
        run: |
          kubectl apply -f manifests/deployment.yml
          kubectl apply -f manifests/service.yml

      - name: Deploy Ingress
        run: kubectl apply -f manifests/ingress.yml

      - name: Get Ingress hostname
        run: |
          echo "Ingress hostname:"
          kubectl get ingress backend-ingress
